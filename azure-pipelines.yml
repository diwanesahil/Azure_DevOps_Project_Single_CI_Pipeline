# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

stages:
- stage: Build
  jobs:
  - job: Build
    pool:
      vmImage: ubuntu-latest

    variables:
    - group: TerraformBackendConfig

    steps:
    - task: TerraformInstaller@1
      displayName: TF install
      inputs:
        terraformVersion: 'latest'

    - task: TerraformTask@5
      displayName: TF Init
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/'
        backendServiceArm: '$(service_Connection)'
        backendAzureRmResourceGroupName: '$(backendResourceGroup)'
        backendAzureRmStorageAccountName: '$(backendStorageAccount)'
        backendAzureRmContainerName: '$(backendContainer)'
        backendAzureRmKey: '$(backendStateFile)'

    - task: TerraformTask@5
      displayName: TF Validate
      inputs:
        provider: 'azurerm'
        command: 'validate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/'

    - task: TerraformTask@5
      displayName: TF Plan
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/'
        commandOptions: '-var-file="variable.tfvars"'
        environmentServiceNameAzureRM: '$(service_Connection)'
    - task: TerraformTask@5
      displayName: TF Apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/'
        commandOptions: '-var-file="variable.tfvars"'
        environmentServiceNameAzureRM: '$(service_Connection)'